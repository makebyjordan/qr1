// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enum for stock movement types
enum StockMovementType {
  ENTRY
  SALE
  ADJUSTMENT
}

// Category model
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
}

// Supplier model
model Supplier {
  id          String   @id @default(cuid())
  name        String   @unique
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
}

// Product model
model Product {
  id           String   @id @default(cuid())
  barcode      String   @unique
  title        String
  name         String
  description  String?
  costPrice    Decimal
  salePrice    Decimal
  taxRate      Decimal
  currentStock Int      @default(0)
  minStock     Int      @default(10)
  categoryId   String?
  supplierId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  category       Category?       @relation(fields: [categoryId], references: [id])
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  stockMovements StockMovement[]
  sales          Sale[]

  // Indexes
  @@index([barcode])
  @@index([currentStock])
  @@index([categoryId])
  @@index([supplierId])
}

// Stock movement model for tracking inventory changes
model StockMovement {
  id         String            @id @default(cuid())
  productId  String
  type       StockMovementType
  quantity   Int
  unitPrice  Decimal
  totalValue Decimal
  notes      String?
  createdAt  DateTime          @default(now())
  createdBy  String?

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([createdAt])
  @@index([productId])
}

// Sales model for tracking individual sales
model Sale {
  id        String   @id @default(cuid())
  productId String
  quantity  Int
  unitPrice Decimal
  subtotal  Decimal
  taxAmount Decimal
  total     Decimal
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([createdAt])
  @@index([productId])
}
